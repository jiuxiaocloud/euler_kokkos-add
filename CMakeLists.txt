cmake_minimum_required(VERSION 3.1)

project(euler_kokkos CXX C)

# options
option (USE_MPI "Activate / want MPI build" OFF)
option (USE_VTK "Activate / want VTK build" OFF)
option (USE_DOUBLE "build with double precision" ON)
option (USE_HDF5 "build HDF5 input/output support" OFF)
option (USE_PNETCDF "build PNETCDF input/output support (MPI required)" OFF)
option (USE_FPE_DEBUG "build with floating point Nan tracing (signal handler)" OFF)

# C++11 is for Kokkos
set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_EXTENSIONS OFF)


#
# default local cmake macro repository
#
set(CMAKE_MODULE_PATH "${PROJECT_SOURCE_DIR}/cmake" ${CMAKE_MODULE_PATH})


#
# Prevent from build in source tree
#
include(${PROJECT_SOURCE_DIR}/cmake/preventBuildInSource.cmake)

#
# Create project version (using git info ?)
# TODO
#

#
# Init build type: Release, Debug, ...
#
include(${PROJECT_SOURCE_DIR}/cmake/initBuildType.cmake)

#
# Write a small header with build data, git version, etc...
#
include(${PROJECT_SOURCE_DIR}/cmake/write_version.cmake)

#
# Initialize CMAKE_MODULE_PATH for Kokkos (location of kokkos.cmake)
#
include(${PROJECT_SOURCE_DIR}/cmake/initKokkosModulePath.cmake)

# At this stage CMAKE_MODULE_PATH must have been populated
# with Kokkos installation path, so we can safely include kokkos.cmake
#
# kokkos.cmake contains Kokkos configuration
# we assume this file to be generated by kokkos itself
#
#message (STATUS "Just printing CMAKE_MODULE_PATH " ${CMAKE_MODULE_PATH})
#include(kokkos)

#####################################################################
# External packages: MPI, ...
#####################################################################


#####################################################################
#find_package(MPI REQUIRED)
find_package(MPI)
if (USE_MPI)
  if(MPI_CXX_FOUND)
    message(STATUS "MPI support found")
    message(STATUS "MPI compile flags: " ${MPI_CXX_COMPILE_FLAGS})
    message(STATUS "MPI include path: " ${MPI_CXX_INCLUDE_PATH})
    message(STATUS "MPI LINK flags path: " ${MPI_CXX_LINK_FLAGS})
    message(STATUS "MPI libraries: " ${MPI_CXX_LIBRARIES})
    #include_directories(SYSTEM ${MPI_CXX_INCLUDE_PATH})

    #set(CMAKE_EXE_LINKER_FLAGS ${MPI_CXX_LINK_FLAGS})
    find_program(OMPI_INFO
      NAMES ompi_info
      HINTS ${MPI_CXX_LIBRARIES}/../bin)
    if (OMPI_INFO)
      execute_process(COMMAND ${OMPI_INFO}
        OUTPUT_VARIABLE _output)
      if (_output MATCHES "smcuda")
        message(STATUS "Found OpenMPI with CUDA support built.")
      else()
        message(WARNING "OpenMPI found, but it is not built with CUDA support.")
	set( CMAKE_CXX_FLAGS  "${CMAKE_CXX_FLAGS} -DMPI_CUDA_AWARE_OFF" )
      endif()
    endif()
  else()
    message(WARNING "Not compiling with MPI. Suppress this warning with -DUSE_MPI=OFF")
    set(USE_MPI OFF)
  endif()
endif()


#####################################################################
# VTK configuration tips, see
# /usr/lib/cmake/vtk-6.2/VTKConfig.cmake
# /usr/lib/cmake/vtk-6.2/UseVTK.cmake
#####################################################################
if (USE_VTK)
  # look for VTK only if requested; VTK macro might even be not present
  # on the target platform
  find_package(VTK)

  # the following add VTK to all targets
  # if(VTK_FOUND)
  #   include(${VTK_USE_FILE})
  # endif(VTK_FOUND)
  if (VTK_FOUND)
    message("***VTK FOUND ${VTK_MAJOR_VERSION}.${VTK_MINOR_VERSION}")
  else()
    message ("*** VTK NOT FOUND")
  endIF()
endif(USE_VTK)

#####################################################################
# HDF5
#####################################################################
# prefer using parallel HDF5 when build with mpi
if (USE_MPI)
  set(HDF5_PREFER_PARALLEL TRUE)
endif(USE_MPI)

if (USE_HDF5)
  find_package(HDF5)
  if(HDF5_FOUND)
    include_directories(${HDF5_INCLUDE_DIR})
    set(my_hdf5_libs hdf5 hdf5_cpp)
    set( CMAKE_CXX_FLAGS  "${CMAKE_CXX_FLAGS} -DUSE_HDF5")
    if (HDF5_IS_PARALLEL)
      set( CMAKE_CXX_FLAGS  "${CMAKE_CXX_FLAGS} -DUSE_HDF5_PARALLEL")
    endif()
  endif(HDF5_FOUND)
endif(USE_HDF5)
  
#####################################################################
# PNETCDF
#####################################################################
if (USE_MPI)
  if (USE_PNETCDF)
    find_package(PNETCDF)
    if (PNETCDF_FOUND)
      set( CMAKE_CXX_FLAGS  "${CMAKE_CXX_FLAGS} -DUSE_PNETCDF")
      include_directories(${PNETCDF_INCLUDE_DIRS})
    endif(PNETCDF_FOUND)
  endif(USE_PNETCDF)
endif(USE_MPI)

#
# common flags
#

if (KOKKOS_ENABLE_CUDA)
  set( CMAKE_CXX_FLAGS  "${CMAKE_CXX_FLAGS} -DCUDA" )
endif()

if (USE_DOUBLE)
  set( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DUSE_DOUBLE" )
endif()

if (USE_MPI)
  set( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DUSE_MPI" )
endif()

if (USE_FPE_DEBUG)
  set( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DUSE_FPE_DEBUG" )
endif()

##
## Using flags -Wextra, it's to strong for Kokkos, too many warnings
## But -Wall is really a minimum
##
#add_definitions(-Wall -Wextra -Wconversion -Wshadow -Wnon-virtual-dtor -Wold-style-cast -Wcast-align -Wcast-qual -Wunused -Woverloaded-virtual  -pedantic )
#add_definitions( -Wall -Wextra )
add_definitions( -Wall )

#
# sources
#
add_subdirectory(kokkos)

# pass Kokkos include directories to our target application
include_directories(${Kokkos_INCLUDE_DIRS_RET})

add_subdirectory(test)
add_subdirectory(src)

############################ PRINT CONFIGURE STATUS ############################

message(STATUS "")
message(STATUS "****************** ${PROJECT_NAME} Settings ******************")

message(STATUS "MPI      enabled : ${USE_MPI}")
message(STATUS "CUDA     enabled : ${KOKKOS_ENABLE_CUDA}")
message(STATUS "HDF5     enabled : ${USE_HDF5}")
message(STATUS "PNETCDF  enabled : ${USE_PNETCDF}")
message(STATUS "DOUBLE precision : ${USE_DOUBLE}")
message(STATUS "HWLOC    enabled : ${KOKKOS_ENABLE_HWLOC}")

message(STATUS "****************** *************** ******************")

